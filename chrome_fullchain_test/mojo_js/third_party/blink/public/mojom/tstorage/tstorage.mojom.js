// third_party/blink/public/mojom/tstorage/tstorage.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/tstorage/tstorage.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');



  function TStorage_Init_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TStorage_Init_Params.prototype.initDefaults_ = function() {
  };
  TStorage_Init_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TStorage_Init_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TStorage_Init_Params.encodedSize = codec.kStructHeaderSize + 0;

  TStorage_Init_Params.decode = function(decoder) {
    var packed;
    var val = new TStorage_Init_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TStorage_Init_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TStorage_Init_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TStorage_Init_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TStorage_Init_ResponseParams.prototype.initDefaults_ = function() {
  };
  TStorage_Init_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TStorage_Init_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TStorage_Init_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TStorage_Init_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TStorage_Init_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TStorage_Init_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TStorage_Init_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TStorage_CreateInstance_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TStorage_CreateInstance_Params.prototype.initDefaults_ = function() {
  };
  TStorage_CreateInstance_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TStorage_CreateInstance_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TStorage_CreateInstance_Params.encodedSize = codec.kStructHeaderSize + 0;

  TStorage_CreateInstance_Params.decode = function(decoder) {
    var packed;
    var val = new TStorage_CreateInstance_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TStorage_CreateInstance_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TStorage_CreateInstance_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TStorage_CreateInstance_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TStorage_CreateInstance_ResponseParams.prototype.initDefaults_ = function() {
    this.instance = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  TStorage_CreateInstance_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TStorage_CreateInstance_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TStorage_CreateInstance_ResponseParams.instance
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TStorage_CreateInstance_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TStorage_CreateInstance_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TStorage_CreateInstance_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instance =
        decoder.decodeStruct(codec.NullableAssociatedInterfacePtrInfo);
    return val;
  };

  TStorage_CreateInstance_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TStorage_CreateInstance_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableAssociatedInterfacePtrInfo, val.instance);
  };
  function TInstance_Push_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Push_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TInstance_Push_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Push_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_Push_Params.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_Push_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_Push_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  TInstance_Push_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Push_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function TInstance_Push_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Push_ResponseParams.prototype.initDefaults_ = function() {
  };
  TInstance_Push_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Push_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_Push_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_Push_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_Push_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_Push_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Push_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_Pop_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Pop_Params.prototype.initDefaults_ = function() {
  };
  TInstance_Pop_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Pop_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_Pop_Params.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_Pop_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_Pop_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_Pop_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Pop_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_Pop_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Pop_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TInstance_Pop_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Pop_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_Pop_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_Pop_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_Pop_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  TInstance_Pop_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Pop_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function TInstance_Set_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Set_Params.prototype.initDefaults_ = function() {
    this.index = 0;
    this.value = 0;
  };
  TInstance_Set_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Set_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  TInstance_Set_Params.encodedSize = codec.kStructHeaderSize + 16;

  TInstance_Set_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_Set_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.index =
        decoder.decodeStruct(codec.Uint64);
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  TInstance_Set_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Set_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.index);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function TInstance_Set_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Set_ResponseParams.prototype.initDefaults_ = function() {
  };
  TInstance_Set_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Set_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_Set_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_Set_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_Set_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_Set_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Set_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_Get_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Get_Params.prototype.initDefaults_ = function() {
    this.index = 0;
  };
  TInstance_Get_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Get_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_Get_Params.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_Get_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_Get_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.index =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  TInstance_Get_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Get_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.index);
  };
  function TInstance_Get_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_Get_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TInstance_Get_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_Get_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_Get_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_Get_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_Get_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  TInstance_Get_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_Get_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function TInstance_SetInt_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_SetInt_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TInstance_SetInt_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_SetInt_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_SetInt_Params.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_SetInt_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_SetInt_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  TInstance_SetInt_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_SetInt_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.value);
  };
  function TInstance_SetInt_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_SetInt_ResponseParams.prototype.initDefaults_ = function() {
  };
  TInstance_SetInt_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_SetInt_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_SetInt_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_SetInt_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_SetInt_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_SetInt_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_SetInt_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_GetInt_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_GetInt_Params.prototype.initDefaults_ = function() {
  };
  TInstance_GetInt_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_GetInt_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_GetInt_Params.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_GetInt_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_GetInt_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_GetInt_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_GetInt_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_GetInt_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_GetInt_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TInstance_GetInt_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_GetInt_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_GetInt_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_GetInt_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_GetInt_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  TInstance_GetInt_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_GetInt_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.value);
  };
  function TInstance_SetDouble_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_SetDouble_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TInstance_SetDouble_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_SetDouble_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_SetDouble_Params.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_SetDouble_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_SetDouble_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  TInstance_SetDouble_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_SetDouble_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
  };
  function TInstance_SetDouble_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_SetDouble_ResponseParams.prototype.initDefaults_ = function() {
  };
  TInstance_SetDouble_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_SetDouble_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_SetDouble_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_SetDouble_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_SetDouble_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_SetDouble_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_SetDouble_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_GetDouble_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_GetDouble_Params.prototype.initDefaults_ = function() {
  };
  TInstance_GetDouble_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_GetDouble_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_GetDouble_Params.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_GetDouble_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_GetDouble_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_GetDouble_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_GetDouble_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_GetDouble_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_GetDouble_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  TInstance_GetDouble_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_GetDouble_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_GetDouble_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_GetDouble_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_GetDouble_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  TInstance_GetDouble_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_GetDouble_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
  };
  function TInstance_GetTotalSize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_GetTotalSize_Params.prototype.initDefaults_ = function() {
  };
  TInstance_GetTotalSize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_GetTotalSize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TInstance_GetTotalSize_Params.encodedSize = codec.kStructHeaderSize + 0;

  TInstance_GetTotalSize_Params.decode = function(decoder) {
    var packed;
    var val = new TInstance_GetTotalSize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TInstance_GetTotalSize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_GetTotalSize_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TInstance_GetTotalSize_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TInstance_GetTotalSize_ResponseParams.prototype.initDefaults_ = function() {
    this.size = 0;
  };
  TInstance_GetTotalSize_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TInstance_GetTotalSize_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TInstance_GetTotalSize_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TInstance_GetTotalSize_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TInstance_GetTotalSize_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  TInstance_GetTotalSize_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TInstance_GetTotalSize_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.size);
  };
  var kTStorage_Init_Name = 0;
  var kTStorage_CreateInstance_Name = 1;

  function TStoragePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TStorage,
                                                   handleOrPtrInfo);
  }

  function TStorageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TStorage, associatedInterfacePtrInfo);
  }

  TStorageAssociatedPtr.prototype =
      Object.create(TStoragePtr.prototype);
  TStorageAssociatedPtr.prototype.constructor =
      TStorageAssociatedPtr;

  function TStorageProxy(receiver) {
    this.receiver_ = receiver;
  }
  TStoragePtr.prototype.init = function() {
    return TStorageProxy.prototype.init
        .apply(this.ptr.getProxy(), arguments);
  };

  TStorageProxy.prototype.init = function() {
    var params_ = new TStorage_Init_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTStorage_Init_Name,
          codec.align(TStorage_Init_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TStorage_Init_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TStorage_Init_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TStoragePtr.prototype.createInstance = function() {
    return TStorageProxy.prototype.createInstance
        .apply(this.ptr.getProxy(), arguments);
  };

  TStorageProxy.prototype.createInstance = function() {
    var params_ = new TStorage_CreateInstance_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kTStorage_CreateInstance_Name,
          codec.align(TStorage_CreateInstance_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(TStorage_CreateInstance_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TStorage_CreateInstance_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TStorageStub(delegate) {
    this.delegate_ = delegate;
  }
  TStorageStub.prototype.init = function() {
    return this.delegate_ && this.delegate_.init && this.delegate_.init();
  }
  TStorageStub.prototype.createInstance = function() {
    return this.delegate_ && this.delegate_.createInstance && this.delegate_.createInstance();
  }

  TStorageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TStorageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTStorage_Init_Name:
      var params = reader.decodeStruct(TStorage_Init_Params);
      this.init().then(function(response) {
        var responseParams =
            new TStorage_Init_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTStorage_Init_Name,
            codec.align(TStorage_Init_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TStorage_Init_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTStorage_CreateInstance_Name:
      var params = reader.decodeStruct(TStorage_CreateInstance_Params);
      this.createInstance().then(function(response) {
        var responseParams =
            new TStorage_CreateInstance_ResponseParams();
        responseParams.instance = response.instance;
        var builder = new codec.MessageV2Builder(
            kTStorage_CreateInstance_Name,
            codec.align(TStorage_CreateInstance_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(TStorage_CreateInstance_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTStorageRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTStorage_Init_Name:
        if (message.expectsResponse())
          paramsClass = TStorage_Init_Params;
      break;
      case kTStorage_CreateInstance_Name:
        if (message.expectsResponse())
          paramsClass = TStorage_CreateInstance_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTStorageResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTStorage_Init_Name:
        if (message.isResponse())
          paramsClass = TStorage_Init_ResponseParams;
        break;
      case kTStorage_CreateInstance_Name:
        if (message.isResponse())
          paramsClass = TStorage_CreateInstance_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TStorage = {
    name: 'blink.mojom.TStorage',
    kVersion: 0,
    ptrClass: TStoragePtr,
    proxyClass: TStorageProxy,
    stubClass: TStorageStub,
    validateRequest: validateTStorageRequest,
    validateResponse: validateTStorageResponse,
  };
  TStorageStub.prototype.validator = validateTStorageRequest;
  TStorageProxy.prototype.validator = validateTStorageResponse;
  var kTInstance_Push_Name = 0;
  var kTInstance_Pop_Name = 1;
  var kTInstance_Set_Name = 2;
  var kTInstance_Get_Name = 3;
  var kTInstance_SetInt_Name = 4;
  var kTInstance_GetInt_Name = 5;
  var kTInstance_SetDouble_Name = 6;
  var kTInstance_GetDouble_Name = 7;
  var kTInstance_GetTotalSize_Name = 8;

  function TInstancePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TInstance,
                                                   handleOrPtrInfo);
  }

  function TInstanceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TInstance, associatedInterfacePtrInfo);
  }

  TInstanceAssociatedPtr.prototype =
      Object.create(TInstancePtr.prototype);
  TInstanceAssociatedPtr.prototype.constructor =
      TInstanceAssociatedPtr;

  function TInstanceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TInstancePtr.prototype.push = function() {
    return TInstanceProxy.prototype.push
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.push = function(value) {
    var params_ = new TInstance_Push_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_Push_Name,
          codec.align(TInstance_Push_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_Push_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_Push_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.pop = function() {
    return TInstanceProxy.prototype.pop
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.pop = function() {
    var params_ = new TInstance_Pop_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_Pop_Name,
          codec.align(TInstance_Pop_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_Pop_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_Pop_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.set = function() {
    return TInstanceProxy.prototype.set
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.set = function(index, value) {
    var params_ = new TInstance_Set_Params();
    params_.index = index;
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_Set_Name,
          codec.align(TInstance_Set_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_Set_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_Set_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.get = function() {
    return TInstanceProxy.prototype.get
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.get = function(index) {
    var params_ = new TInstance_Get_Params();
    params_.index = index;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_Get_Name,
          codec.align(TInstance_Get_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_Get_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_Get_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.setInt = function() {
    return TInstanceProxy.prototype.setInt
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.setInt = function(value) {
    var params_ = new TInstance_SetInt_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_SetInt_Name,
          codec.align(TInstance_SetInt_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_SetInt_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_SetInt_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.getInt = function() {
    return TInstanceProxy.prototype.getInt
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.getInt = function() {
    var params_ = new TInstance_GetInt_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_GetInt_Name,
          codec.align(TInstance_GetInt_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_GetInt_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_GetInt_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.setDouble = function() {
    return TInstanceProxy.prototype.setDouble
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.setDouble = function(value) {
    var params_ = new TInstance_SetDouble_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_SetDouble_Name,
          codec.align(TInstance_SetDouble_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_SetDouble_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_SetDouble_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.getDouble = function() {
    return TInstanceProxy.prototype.getDouble
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.getDouble = function() {
    var params_ = new TInstance_GetDouble_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_GetDouble_Name,
          codec.align(TInstance_GetDouble_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_GetDouble_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_GetDouble_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TInstancePtr.prototype.getTotalSize = function() {
    return TInstanceProxy.prototype.getTotalSize
        .apply(this.ptr.getProxy(), arguments);
  };

  TInstanceProxy.prototype.getTotalSize = function() {
    var params_ = new TInstance_GetTotalSize_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTInstance_GetTotalSize_Name,
          codec.align(TInstance_GetTotalSize_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TInstance_GetTotalSize_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TInstance_GetTotalSize_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TInstanceStub(delegate) {
    this.delegate_ = delegate;
  }
  TInstanceStub.prototype.push = function(value) {
    return this.delegate_ && this.delegate_.push && this.delegate_.push(value);
  }
  TInstanceStub.prototype.pop = function() {
    return this.delegate_ && this.delegate_.pop && this.delegate_.pop();
  }
  TInstanceStub.prototype.set = function(index, value) {
    return this.delegate_ && this.delegate_.set && this.delegate_.set(index, value);
  }
  TInstanceStub.prototype.get = function(index) {
    return this.delegate_ && this.delegate_.get && this.delegate_.get(index);
  }
  TInstanceStub.prototype.setInt = function(value) {
    return this.delegate_ && this.delegate_.setInt && this.delegate_.setInt(value);
  }
  TInstanceStub.prototype.getInt = function() {
    return this.delegate_ && this.delegate_.getInt && this.delegate_.getInt();
  }
  TInstanceStub.prototype.setDouble = function(value) {
    return this.delegate_ && this.delegate_.setDouble && this.delegate_.setDouble(value);
  }
  TInstanceStub.prototype.getDouble = function() {
    return this.delegate_ && this.delegate_.getDouble && this.delegate_.getDouble();
  }
  TInstanceStub.prototype.getTotalSize = function() {
    return this.delegate_ && this.delegate_.getTotalSize && this.delegate_.getTotalSize();
  }

  TInstanceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TInstanceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTInstance_Push_Name:
      var params = reader.decodeStruct(TInstance_Push_Params);
      this.push(params.value).then(function(response) {
        var responseParams =
            new TInstance_Push_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTInstance_Push_Name,
            codec.align(TInstance_Push_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_Push_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_Pop_Name:
      var params = reader.decodeStruct(TInstance_Pop_Params);
      this.pop().then(function(response) {
        var responseParams =
            new TInstance_Pop_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kTInstance_Pop_Name,
            codec.align(TInstance_Pop_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_Pop_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_Set_Name:
      var params = reader.decodeStruct(TInstance_Set_Params);
      this.set(params.index, params.value).then(function(response) {
        var responseParams =
            new TInstance_Set_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTInstance_Set_Name,
            codec.align(TInstance_Set_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_Set_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_Get_Name:
      var params = reader.decodeStruct(TInstance_Get_Params);
      this.get(params.index).then(function(response) {
        var responseParams =
            new TInstance_Get_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kTInstance_Get_Name,
            codec.align(TInstance_Get_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_Get_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_SetInt_Name:
      var params = reader.decodeStruct(TInstance_SetInt_Params);
      this.setInt(params.value).then(function(response) {
        var responseParams =
            new TInstance_SetInt_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTInstance_SetInt_Name,
            codec.align(TInstance_SetInt_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_SetInt_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_GetInt_Name:
      var params = reader.decodeStruct(TInstance_GetInt_Params);
      this.getInt().then(function(response) {
        var responseParams =
            new TInstance_GetInt_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kTInstance_GetInt_Name,
            codec.align(TInstance_GetInt_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_GetInt_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_SetDouble_Name:
      var params = reader.decodeStruct(TInstance_SetDouble_Params);
      this.setDouble(params.value).then(function(response) {
        var responseParams =
            new TInstance_SetDouble_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTInstance_SetDouble_Name,
            codec.align(TInstance_SetDouble_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_SetDouble_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_GetDouble_Name:
      var params = reader.decodeStruct(TInstance_GetDouble_Params);
      this.getDouble().then(function(response) {
        var responseParams =
            new TInstance_GetDouble_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kTInstance_GetDouble_Name,
            codec.align(TInstance_GetDouble_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_GetDouble_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTInstance_GetTotalSize_Name:
      var params = reader.decodeStruct(TInstance_GetTotalSize_Params);
      this.getTotalSize().then(function(response) {
        var responseParams =
            new TInstance_GetTotalSize_ResponseParams();
        responseParams.size = response.size;
        var builder = new codec.MessageV1Builder(
            kTInstance_GetTotalSize_Name,
            codec.align(TInstance_GetTotalSize_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TInstance_GetTotalSize_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTInstanceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTInstance_Push_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_Push_Params;
      break;
      case kTInstance_Pop_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_Pop_Params;
      break;
      case kTInstance_Set_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_Set_Params;
      break;
      case kTInstance_Get_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_Get_Params;
      break;
      case kTInstance_SetInt_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_SetInt_Params;
      break;
      case kTInstance_GetInt_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_GetInt_Params;
      break;
      case kTInstance_SetDouble_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_SetDouble_Params;
      break;
      case kTInstance_GetDouble_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_GetDouble_Params;
      break;
      case kTInstance_GetTotalSize_Name:
        if (message.expectsResponse())
          paramsClass = TInstance_GetTotalSize_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTInstanceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTInstance_Push_Name:
        if (message.isResponse())
          paramsClass = TInstance_Push_ResponseParams;
        break;
      case kTInstance_Pop_Name:
        if (message.isResponse())
          paramsClass = TInstance_Pop_ResponseParams;
        break;
      case kTInstance_Set_Name:
        if (message.isResponse())
          paramsClass = TInstance_Set_ResponseParams;
        break;
      case kTInstance_Get_Name:
        if (message.isResponse())
          paramsClass = TInstance_Get_ResponseParams;
        break;
      case kTInstance_SetInt_Name:
        if (message.isResponse())
          paramsClass = TInstance_SetInt_ResponseParams;
        break;
      case kTInstance_GetInt_Name:
        if (message.isResponse())
          paramsClass = TInstance_GetInt_ResponseParams;
        break;
      case kTInstance_SetDouble_Name:
        if (message.isResponse())
          paramsClass = TInstance_SetDouble_ResponseParams;
        break;
      case kTInstance_GetDouble_Name:
        if (message.isResponse())
          paramsClass = TInstance_GetDouble_ResponseParams;
        break;
      case kTInstance_GetTotalSize_Name:
        if (message.isResponse())
          paramsClass = TInstance_GetTotalSize_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TInstance = {
    name: 'blink.mojom.TInstance',
    kVersion: 0,
    ptrClass: TInstancePtr,
    proxyClass: TInstanceProxy,
    stubClass: TInstanceStub,
    validateRequest: validateTInstanceRequest,
    validateResponse: validateTInstanceResponse,
  };
  TInstanceStub.prototype.validator = validateTInstanceRequest;
  TInstanceProxy.prototype.validator = validateTInstanceResponse;
  exports.TStorage = TStorage;
  exports.TStoragePtr = TStoragePtr;
  exports.TStorageAssociatedPtr = TStorageAssociatedPtr;
  exports.TInstance = TInstance;
  exports.TInstancePtr = TInstancePtr;
  exports.TInstanceAssociatedPtr = TInstanceAssociatedPtr;
})();